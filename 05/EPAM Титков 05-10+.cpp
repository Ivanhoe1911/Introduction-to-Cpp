/**
*
* Титков Иван
* 10. *Найти первое простое число n в заданной последовательности натуральных чисел с максимальной суммой цифр.
* Нахождение суммы цифр числа оформить как рекурсивную функцию.
* При решении этой задачи нельзя использовать циклы, строки, списки, массивы
*
*/

#include <iostream>

using namespace std;

// Прототип рекурсивной функция определения простого числа.
bool isPrime(int var, int i = 2);

// Прототип рекурсивной функции подсчета суммы цифр числа.
int numSum(int var);

// Прототип функции поиска и записи макисмального переданного числа.
void compare(int num, int sum, int &maxn, int &maxs);

int main()
{
	setlocale(LC_ALL, "ru");

	int q;				// Количество вводимых значений.
	int n;				// Натуральное число 'n'.
	int nMaxPrime;		// Искомое простое число;
	int nMaxSum = 0;	// Сумма цифр искомого числа;

	cout << "Сколько чисел будете вводить?: ";	// Запрашиваем, сколько чисел будем вводить.
	cin >> q;
	cout << "Введите " << q << " числа(ел):" << endl << endl;

	while (q--)									// Запрашиваем 'q' раз число 'n'.
	{
		cout << "Введите натуральное число: ";	// Вводим анализируемое число с клавиатуры.
		cin >> n;
		cout << "Вы ввели: " << n << endl;

		if (isPrime(n))			// Передаем число на проверку на простое число.
		{						// Если проверка пройдена то выводим на экран сумму цифр.
			cout << "Это простое число. "
				<< "Сумма его чисел равна " << numSum(n) << endl << endl;
			// И отправляем на проверку на "максимальность".
			compare(n, numSum(n), nMaxPrime, nMaxSum); // Результаты будут записаны по ссылкам.
		}
		else
		{
			cout << "Число не является простым." << endl << endl;
		}
	}

	// Выводим ответ на экран.
	if (nMaxSum)	// Если были найдены простые числа, то 'maxSum' будет не равна нулю.
	{
		cout << "Первое простое число с максимальной суммой цифр: " << nMaxPrime
			<< ". Сумма его цифр " << nMaxSum << '.' << endl << endl;
	}
	else		// Если 'nmaxSum' осталась равна нулю, значет не было введено простых чисел.
	{
		cout << "Простых чисел не найдено." << endl << endl;
	}

	system("pause");
}

// Рекурсивная функция определения простого числа.
bool isPrime(int var, int i)	// Передаем в функцию наше число для анализа.
{								// i по умолчанию == 2, переопределять его не надо.
	if (!(var % i))				// Если нет остатка от деления на какое-либо число, то число НЕ простое.
	{
		return false;			// Выходим из рекурсии с отрицательным ответом.
	}
	else if (var % i && i <= sqrt(var))	// Пока число делится с остатком
	{									// и делитель меньше корня делимого,
		isPrime(var, ++i);				// идем в рекурсию с +1 к делителю.
	}
	else						// Если доделили до условия и все время остаток,
	{							// то число простое,
		return true;			// выходим из рекурсии с положительным ответом.
	}
}

// Рекурсивная функция подсчета суммы цифр числа.
int numSum(int var)
{
	if (var < 10)		// Когда доделили до одной цифры - возвращаем ее.
	{
		return var;
	}
	else				// Иначе идем в рекурсию уменьшив число на 10
	{					// и плюс последняя цифра.
		return (var % 10) + numSum(var / 10);
	}
}

// Функция поиска и записи макисмального переданного числа.
void compare(int num, int sum, int &maxn, int &maxs)
{
	if (sum > maxs) // Если сумма цифр является наибольшей,
	{				// то передаваемые по ссылке переменные перезаписываются.
		maxn = num;
		maxs = sum;
	}
}