/**
*
* Титков Иван
* 7. Вводится последовательность из n натуральных чисел.
* Найти среди них первое простое число с максимальной суммой цифр.
*
*/

#include <iostream>

using namespace std;

bool isPrime(int var);	// Прототип функции определения палиндрома.
int sum(int var);		// Прототип функции подсчета суммы цифр
// Прототип функции поиска и записи макисмального переданного числа.
void compare(int num, int sum, int &maxn, int &maxs);

int main()
{
	setlocale(LC_ALL, "ru");

	int n;				// Количество вводимых натуральных чисел.
	int number;			// Текущее вводимое число.
	int maxNumber;		// Для хранения ответа - простого числа с максимальной сумой цифр.
	int maxSum = 0;		// Для хранения части ответа - суммы цифр простого числа.

	cout << "Сколько чисел будете вводить?: ";	// Запрашиваем, сколько чисел будем вводить.
	cin >> n;
	cout << "Введите " << n << " числа(ел):" << endl << endl;

	while (n--)									// Запрашиваем число'n' раз.
	{
		cout << "Введите натуральное число: ";	// Вводим анализируемое число с клавиатуры.
		cin >> number;
		cout << "Вы ввели: " << number << endl;
		if (isPrime(number))	// Передаем число на проверку на простое число.
		{						// Если проверка пройдена то выводим на экран сумму цифр.
			cout << "Это простое число. "
				<< "Сумма его чисел равна " << sum(number) << endl << endl;
			// И отправляем на проверку на "максимальность".
			compare(number, sum(number), maxNumber, maxSum); // Результаты будут записаны по ссылкам.
		}
		else
		{
			cout << "Число не является простым." << endl << endl;
		}
	}

	// Выводим ответ на экран.
	if (maxSum)	// Если были найдены простые числа, то 'maxSum' будет не равна нулю.
	{
		cout << "Первое простое число с максимальной суммой цифр: " << maxNumber
			<< ". Сумма его цифр " << maxSum << '.' << endl << endl;
	}
	else		// Если 'maxSum' осталась равна нулю, значет не было введено простых чисел.
	{
		cout << "Простых чисел не найдено." << endl << endl;
	}

	system("pause");
}

// Функция определения простого числа.
bool isPrime(int var)			// Передаем в функцию наше число для анализа.
{
	for (int i = 2; i <= sqrt(var); i++)	// Делим операнд на все числа от 2 до корня из операнда,
	{									// можно и больше, чем корень из операнда, но не обязательно.
		if (!(var % i))		// Если нет остатка от деления на какое-либо число, то число НЕ простое.
		{
			return false;	// Сразу передаем ответ из функции.
		}					// Если есть остаток от деления - продолжаем проверку.
	}
	return true;			// Если выхода за время работы цикла не произошло значит число простое, возвращаем ответ.
}

// Функция подсчета суммы цифр числа.
int sum(int var)
{
	int varsum = 0;	// Переменная для хранения результата.
	do
	{
		varsum += var % 10;	// Суммируем остатки от деления на 10,
	} while (var /= 10);	// на каждой итерации уменьшая число на 10 до нуля.
	return varsum;
}

// Функция поиска и записи макисмального переданного числа.
void compare(int num, int sum, int &maxn, int &maxs)
{
	if (sum > maxs) // Если сумма цифр является наибольшей,
	{				// то передаваемые по ссылке переменные перезаписываются.
		maxn = num;
		maxs = sum;
	}
}